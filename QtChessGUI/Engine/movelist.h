//============================================================
// movelist.h
// ChessEngine
//============================================================

#pragma once
#ifndef MOVELIST_H
#define MOVELIST_H
#include "basic_types.h"
#include <vector>

namespace BlendXChess
{
	//============================================================
	// Class representing list of moves generated by generateMoves function
	// Maintains sorting moves by their score
	//============================================================

	class MoveList
	{
	public:
		// Max possible count of moves in a valid chess position
		static constexpr int MAX_MOVECNT = 218;
		// Constructor
		MoveList(void);
		// Begin/end
		inline Move* begin(void) noexcept;
		inline Move* end(void) noexcept;
		// Getters
		inline int count(void) const noexcept;
		// Inline functions
		inline bool empty(void) const noexcept;
		inline void reset(void) noexcept;
		inline void clear(void) noexcept;
		// Whether there are moves left
		inline bool movesLeft(void) const noexcept;
		// Add a move to the list
		void add(Move);
		// Get next move (in the order of moves array, so maybe we
		// should sort moves before calling this function)
		Move getNext(void);
		// Get the move by index
		Move& operator[](int);
		// Get AN representation of moves
		std::vector<std::string> toAN(void) const;
	private:
		int moveCnt; // Move count
		int moveIdx; // Next move index (for getNextBest type of move acquisition)
		Move moves[MAX_MOVECNT]; // The whole move list
	};

	//============================================================
	// Implementation of inline functions
	//============================================================

	inline Move* MoveList::begin(void) noexcept
	{
		return moves;
	}

	inline Move* MoveList::end(void) noexcept
	{
		return moves + moveCnt;
	}

	inline int MoveList::count(void) const noexcept
	{
		return moveCnt;
	}

	inline bool MoveList::empty(void) const noexcept
	{
		return moveCnt == 0;
	}

	inline void MoveList::reset(void) noexcept
	{
		moveIdx = 0;
	}

	inline void MoveList::clear(void) noexcept
	{
		moveIdx = moveCnt = 0;
	}

	inline bool MoveList::movesLeft(void) const noexcept
	{
		return moveIdx < moveCnt;
	}

};

#endif